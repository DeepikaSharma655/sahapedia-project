{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\nextjs\\\\sahapedia-project\\\\pages\\\\article-listing.js\";\n\n// posts will be populated at build time by getStaticProps()\nfunction Article(_ref) {\n  var _this = this;\n\n  var posts = _ref.posts;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 13\n  }, this);\n} // This function gets called at build time on server-side.\n// It won't be called on client-side, so you can even do\n// direct database queries. See the \"Technical details\" section.\n\n\n_c = Article;\nexport var __N_SSG = true;\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["D:/nextjs/sahapedia-project/pages/article-listing.js"],"names":["Article","posts","map","post","title"],"mappings":";;;AACA;AACA,SAASA,OAAT,OAA4B;AAAA;;AAAA,MAATC,KAAS,QAATA,KAAS;AAExB,sBAAQ;AAAA,2BAEN;AAAA,gBACGA,KAAK,CAACC,GAAN,CAAU,UAACC,IAAD;AAAA,4BACT;AAAA,oBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,iBADS;AAAA,OAAV;AADH;AAAA;AAAA;AAAA;AAAA;AAFM;AAAA;AAAA;AAAA;AAAA,UAAR;AASD,C,CAED;AACA;AACA;;;KAfOJ,O;;AA+BP,eAAeA,OAAf","sourcesContent":[" \r\n// posts will be populated at build time by getStaticProps()\r\nfunction Article({ posts }) {\r\n  \r\n    return (<div>\r\n      \r\n      <ul>\r\n        {posts.map((post) => (\r\n          <li>{post.title}</li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  // This function gets called at build time on server-side.\r\n  // It won't be called on client-side, so you can even do\r\n  // direct database queries. See the \"Technical details\" section.\r\n  export async function getStaticProps() {\r\n    // Call an external API endpoint to get posts.]\r\n    // You can use any data fetching library\r\n    const res = await fetch('https://www.museumsofindia.org/sp/events')\r\n    const posts = await res.json()\r\n  \r\n    // By returning { props: posts }, the Blog component\r\n    // will receive `posts` as a prop at build time\r\n    return {\r\n      props: {\r\n        posts,\r\n      },\r\n    }\r\n  }\r\n  \r\n  export default Article\r\n  "]},"metadata":{},"sourceType":"module"}